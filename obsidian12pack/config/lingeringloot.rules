
# Hi!  I'm Nikky!  capitalthree kidnapped me and they won't let me go until I explain this stupid new config format to
# you.  capitalthree threw out the nice simple config format you're used to and replaced it with this confusing mess,
# so let's just get this over with so I can go back to working on modpacker tools.

# The first thing you need to know about is predicates.  If you don't know what those are, you shouldn't even be...
# eeep!  that tickles!  okay, okay, I'll be nice!  Predicates are the fundamental tests you can filter on in your rules.

# Predicates:
#  itemname
#   - This can be a vanilla itemname, or modid:itemname, itemname@damage, etc
#  $oredictName
#  %tagname
#  @cause
#  &class
#  :modid
#   - Note that these cannot be checked for correctness at rules load time
#  !negated
#  (comparison)

# Cause refers to the conditions that caused the item to drop, as in the classic lingering loot config. They are:
#  @playerDrop
#  @playerHarvest = @playerKill | @playerMine
#  @playerKill
#  @playerMine
#  @mobDrop
#  @playerToss
#  @playerCaused = @playerToss | @playerHarvest | @playerDrop
#  @creativeGive
#  @other

# Note that other works differently from in the old config.  Other only applies if no other causes apply, regardless of
# whether other rules were matched.  To provide a fallthrough value, just make a rule with fewer or no predicates at a
# lower priority level.

# Some of the causes are sets of certain other causes, provided for convenience.  As if there's anything convenient
# about-  eeeep!  Okay, okay, I'll read it! Class refers to certain classes of items, as follows:
#  &armor
#  &block
#  &food
#  &tool

# Comparison predicates let you do numeric comparisons... equality or inequality.  The syntax is simple:
# (var=000) where var is a variable name and 000 is some constant.  = can be one of the following operators:
# > < = >= <= !=
# Note that the tailing ')' is just a cosmetic feature that the parser ignores and can be left off.

# The variables allowed are: x, y, z, dim, light, delay, and timer, for coordinates, dimension id, light level, pickup
# delay before rules evaluation (in ticks), and despawn timer before rules evaluation (in seconds), respectively.
# The last two can be used for safety, to avoid tampering with items from other mods that have their own custom behavior.
# In vanilla, despawn timer will always be 300 (sec), and pickup delay will be 10 (ticks) for most items and 40 for
# player-thrown items.

# Tag predicates must match an actual tag you have... I mean duh... here's how you define a tag:
# | tagname [predicateA  predB  predC,
# |    predD  predE]

# The tag's value would be, stated mathematically, (A & B & C) | (D & E)
# Note that commas are equivalent to newlines (breaking up and groups) thanks to
# Falkreon's suggestions.  capitalthree was about to design something dumb otherwise.

# Now it wouldn't be much use to just define a bunch of tags, right?  Not that
# anyone would have been surprised if capitalthree pulled that stunt... yaaugh ok,
# ok, no tickling!  ...So that's why we have rules, which can have effects!
# | priority     (predicate...)   ->   effect   (effect...)
# Priority is an integer, obviously.  A rule with no predicates will always match.

# There are 4 categories of effects, and for each, the highest priority rule takes precedence, but if a rule provides
# some effects, lower priority rules can still match and provide different effects.  If two rules have the same
# priority, the first one comes first.

# To make a rule terminal, simply add "finalize" at the end of the effects, which adds all no-op effects.  Effects from
# the same rule are applied in-order, so for example any effect after "finalize" in a rule is ignored.

# And now surely by now you want to know what this overengineered pile of... yeeep!  Okayyy put away that feather!  So
# what can this mod actually make items do?  Well here are the actual effects:
# timer(t)       set despawn time to t seconds (float)
# pickupdelay(t) set pickup delay (time before item can be picked up) to t ticks (int)
# despawn(h)     item will trigger special behavior when it would despawn (handler options: H = hardcore)
# convert(i)     transform into same-sized stack of item i (note that any predicate matching is still based on the original item)
# any of the above but without a param: leaves vanilla behavior alone and prevents matching a lower priority rule
# finalize       no more effects.  shorthand for timer pickupdelay despawn convert

# One particular use case you might want to be aware of is ore deduplication at the time of mining.  This is the
# primary intended purpose of the convert effect (though you can use it for whatever you like).  To deduplicate an ore
# type, make a convert rule that matches on the oredict name and converts to your favorite example of that ore.  Like:
# | 0 $ingotBronze -> convert(embers:ingot_bronze)

# Maybe you loved lingering loot hardcore mode but hated the silverfish?  Now you can just change your hardcore mode
# rule to exclude foods!
# | 0 !&food -> despawn(H)

# Want a quick and dirty way to let players convert an item into another?  Make a rule for when players toss it, and
# set the pickup delay to 0 so they get the result instantly!
# | 1 @playerToss someitem -> convert(otheritem) pickupdelay(0) finalize

# There.  What more could you want from me?  Make yourself a wacky fun lingering loot ruleset today!  I'm freeeeeeeeeee!

crap [minecraft:cobblestone, minecraft:snowball
]

# The safe tag identifies items that have not had their despawn timer or pickup delay changed by other mods
safe [(timer=300) %vanillaPickupDelay]
vanillaPickupDelay [(delay=10), (delay=40)]

thrownOrNatural [@playerToss, !@playerCaused]
dynamicTreesSapling [:dynamictrees, :dynamictreesbop, :dynamictreesquark, :dynamictreestc, :dynamictreestconstruct]

# convert Mystical World ores to Thermal Foundation equivalents
5 %safe mysticalworld:copper_ore -> convert(thermalfoundation:ore@0)
5 %safe mysticalworld:silver_ore -> convert(thermalfoundation:ore@2)

# convert Embers ores to Thermal Foundation equivalents
5 %safe embers:ore_tin -> convert(thermalfoundation:ore@1)
5 %safe embers:ore_aluminum -> convert(thermalfoundation:ore@4)
5 %safe embers:ore_nickel -> convert(thermalfoundation:ore@5)
5 %safe embers:ore_lead -> convert(thermalfoundation:ore@3)

2 %safe %thrownOrNatural $treeSapling !%dynamicTreesSapling -> timer(300) despawn(H) finalize

1 @creativeGive -> timer(60.0) finalize
0 snowball -> despawn(H)
-1 %safe @playerDrop -> timer(3600.0)
-2 %safe @playerHarvest %crap -> timer(300.0)
-5 %safe @playerCaused -> timer(1800.0)
-6 %safe %crap -> timer(300.0)
-8 %safe -> timer(900.0)
-9 %safe @playerMine -> pickupdelay(5)
